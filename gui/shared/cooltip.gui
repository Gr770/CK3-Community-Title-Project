container = {
	alwaystransparent = no
	name = "GameConceptTooltipDefault"
	object_tooltip_pop_out = {
		blockoverride "header_tt" {}

		blockoverride "header_additions" {
			hbox = {
				visible = "[GameConceptTooltip.HasIcon]"
				margin_right = 5
				margin_top = -10
				icon = {
					size = { 52 52 }
					texture = "[GameConceptTooltip.GetIcon]"
					tintcolor = "[TooltipInfo.GetTintColor]"
					frame = "[GameConceptTooltip.GetFrame]"
					framesize = "[GameConceptTooltip.GetFrameSize]"
				}
			}
		}

		blockoverride "title_text" {
			text = "[GameConceptTooltip.GetOriginalAliasName]"
		}

		blockoverride "concept_link" {
			text = "[GameConceptTooltip.GetParentText]"
		}

		blockoverride "description_text" {
			text = "[GameConceptTooltip.GetDescription]"
			max_width = 400
		}

		blockoverride "bg_texture"
		{
			texture = "gfx/interface/tooltips/tooltip_bg_gameconcept.dds"
		}
	}
}

template character_opinion_tooltip {
	widget = {
		using = GeneralTooltipSetup
		using = DefaultTooltipBackground
		alwaystransparent = no

		vbox = {
			set_parent_size_to_minimum = yes

			margin = { 8 8 }

			spacing = 2

			hbox = {
				name = "heading"
				layoutpolicy_horizontal = expanding

				margin = {8 8}

				spacing = 3 #ugly hack to get a space between label and value

				background = {
					using = Background_Area_Dark
				}

				text_single = {
					block "ott_heading_text"
					{
						text = "[Character.GetOpinionHeadingText( GetPlayer )]"
					}

					using = Font_Size_Medium
					align = nobaseline
				}

				text_single = {
					background = {
						name = "portrait_opinion_bg"
						texture = "gfx/interface/component_tiles/solid_black_label.dds"
						spritetype = Corneredtiled
						spriteborder = { 20 20 }
						texture_density = 2
						margin = { 3 1 }
					}

					max_width = 45
					align = nobaseline

					block "ott_opinion_value_text"
					{
						text = "[Character.GetOpinionOf( GetPlayer )|=]"
						fonttintcolor = "[Character.GetOpinionOfTint( GetPlayer )]"
					}

					default_format = "#true_white"
					using = Font_Size_Medium
				}

				expand = {}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = {8 0}
				visible = "[Character.IsPlayer]"

				text_multi = {
					datacontext = "[Character]"
					visible = "[Not( Character.IsLocalPlayer )]"

					autoresize = yes
					max_width = 400
					text = "PLAYER_OPINION_UNIMPORTANT"
					default_format = "#weak"
				}

				text_multi = {
					datacontext = "[Character]"
					visible = "[Character.IsLocalPlayer]"

					autoresize = yes
					max_width = 400
					text = "PLAYER_OPINION_UNIMPORTANT_SELF"
					default_format = "#weak"
				}

				expand = {}
			}


			hbox = {
				layoutpolicy_horizontal = expanding
				margin = {8 0}

				text_multi = {
					block "ott_opinion_breakdown_text"
					{
						text = "[Character.GetOpinionBreakdownText( GetPlayer )]"
					}

					autoresize = yes
					max_width = 400
				}

				expand = {}
			}
		}
	}
}

template character_trait_tooltip {
	object_tooltip_pop_out = {
		blockoverride "header_additions" {
			hbox = {
				icon = {
					size = { 52 52 }
					texture = "[Trait.GetIcon( Character.Self )]"
					tintcolor = "[TooltipInfo.GetTintColor]"
				}
			}
		}
		blockoverride "title_text" {
			text = "[Trait.GetNameNoTooltipWithDefault( Character.Self )]"
		}

		blockoverride "concept_link" {
			text = "[Trait.GetTraitCategoryLabel]"
		}
		blockoverride "description_text" {
			block "actual_description_text" {
				text = "[Trait.GetFullDescription( Character.Self, Faith.Self )]"
			}
		}
	}
}

container = {
	alwaystransparent = no
	name = "TraitTooltipDefault"
	datacontext = "[Character.GetFaith]"
	using = character_trait_tooltip
}

container = {
	alwaystransparent = no
	name = "FaithDoctrineTooltipDefault"
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "#T [FaithDoctrine.GetBaseNameNoTooltip]#!"
		}
		blockoverride "description_text" {
			text = "FAITH_DOCTRINE_GENERAL_TOOLTIP"
		}
		blockoverride "concept_link" {
			text = [doctrine|E]
		}
	}
}

container = {
	alwaystransparent = no
	name = "LifestyleTooltipDefault"
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[Lifestyle.GetNameNoTooltip]"
		}
		blockoverride "description_text" {
			text = "[Lifestyle.GetDescription]"
		}
		blockoverride "concept_link" {
			text = [lifestyle|E]
		}
		blockoverride "header_additions" {
			hbox = {
				margin_right = 5
				margin_top = -10

				icon = {
					size = { 52 52 }
					texture = "[Lifestyle.GetIcon]"
					framesize = { 160 160 }
					tintcolor = "[TooltipInfo.GetTintColor]"
				}
			}
		}
	}
}

container_focus_cooltip = {
	name = "FocusTooltipDefault"
}

template perk_tooltip_contents {
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[Perk.GetNameNoTooltip( GetPlayer )]"
		}
		blockoverride "description_text" {
			text = "[Perk.GetEffectDescription( GetPlayer )]"
		}
		blockoverride "concept_link" {
			text = [perk|E]
		}
	}
}

container = {
	alwaystransparent = no
	name = "PerkTooltipDefault"

	using = perk_tooltip_contents
}

template perk_tooltip_selection {
	container = {
		alwaystransparent = no
		name = "PerkTooltipSelection"

		using = perk_tooltip_contents

		blockoverride "input_info_text" {
			visible = "[CharacterLifestyleWindow.CanSelectPerk( Perk.Self )]"
			text = "CHOOSE_PERK_UNLOCK_TEXT"
		}

		blockoverride "above_description_text" {
			text = "[CharacterLifestyleWindow.CanSelectPerkDesc( Perk.Self )]"
		}
	}
}

container = {
	alwaystransparent = no
	name = "DynastyPerkTooltipDefault"
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[DynastyPerk.GetNameNoTooltip]"
		}
		blockoverride "description_text" {
			text = "[DynastyPerk.GetEffectDescription( GetPlayer )]"
		}
		blockoverride "concept_link" {
			text = [dynasty_perk|E]
		}
	}
}


container = {
	name = CharacterTooltip

	alwaystransparent = no

	container_character_tooltip = {}
}


types GameTooltipTypes
{
	type object_tooltip_pop_out = widget {
		name = "ObjectTooltipDefault"
		using = GeneralTooltipSetup
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 20 5 }

			hbox = {
				layoutpolicy_horizontal = expanding
				minimumsize = { 400 80 }

				# background = {
				# 	using = Background_Area
				# 	margin = { 15 0 }
				# }

				background = {
					name = "header"
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					spriteType = Corneredstretched
					margin = { 15 0 }
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 160 0 }
						blend_mode = alphamultiply
						alpha = 0.5
					}
				}

				block "header_tt" {}

				hbox = {
					layoutpolicy_horizontal = expanding
					block "header_additions" {}

					vbox = {
						name = "FancyHeader"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no
						margin = { 10 0 }

						text_single = {
							layoutpolicy_horizontal = expanding
							autoresize = yes
							name = "title"

							fontsize_min = 14
							using = Font_Size_Medium
							block "title_text" {}
							fonttintcolor = "[TooltipInfo.GetTintColor]"
						}

						# use subtitle_text blockoverride or replace this entire block
						block "subheading"
						{
							text_single = {
								layoutpolicy_horizontal = expanding
								autoresize = yes
								fontsize_min = 14
								using = Font_Size_Medium
								block "subtitle_text" {
									text = ""
								}
								fonttintcolor = "[TooltipInfo.GetTintColor]"
							}
						}
					}
				}

				expand = {}

				vbox = {
					layoutpolicy_vertical = expanding

					text_single = {
						name = "concept_link"
						layoutpolicy_horizontal = expanding
						block "concept_link" {
							text = "#D Missing concept link!#!"
						}

						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}
				}
			}


			block "extra_data" {}

			textbox = {
				name = "above_description"

				using = DefaultTooltipText
				layoutpolicy_horizontal = expanding
				multiline = yes
				block "above_description_text" {}
				fonttintcolor = "[TooltipInfo.GetTintColor]"
				alwaystransparent = no
			}

			# NOTE: This edit box is filled by TooltipInfo.GetTintColor from code in order to set the correct size when the tooltip is created and positioned and then it uses the text property specified here in the next frames
			textbox = {
				name = "Description"
				layoutpolicy_horizontal = expanding
				max_width = 400
				using = DefaultTooltipText
				multiline = yes
				block "description_text" {}
				fonttintcolor = "[TooltipInfo.GetTintColor]"
				alwaystransparent = no
			}

			# Things like "click to X", hotkeys etc
			textbox = {
				name = "input_info"
				layoutpolicy_horizontal = expanding
				margin_top = 10
				using = DefaultTooltipText
				multiline = yes
				block "input_info_text" {}
				fonttintcolor = "[TooltipInfo.GetTintColor]"
			}

			textbox = {
				name = "TooltipTextShortcut"
				layoutpolicy_horizontal = expanding
				using = DefaultTooltipText
				margin = { 10 5 }
				margin_top = 10
			}
		}
	}

	type cooltip_type = widget {
		name = "character_tooltip"
		alwaystransparent = no
		using = GeneralTooltipSetup

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
			block "bg_visible" {
				visible = yes
			}
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 15 15 }
			margin_top = 3

			## REAL CHARACTERS
			vbox = {
				visible = "[Character.IsValid]"
				layoutpolicy_horizontal = expanding

				vbox = {
					name = "personal"
					layoutpolicy_horizontal = expanding

					# background = {
					# 	name = "header"
					# 	texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					# 	spriteType = Corneredtiled
					# 	spriteborder_top = 54
					# 	margin = { 12 0 }
					# 	margin_bottom = 15
					# 	margin_top = 5
					# 	texture_density = 2

					# 	modify_texture = {
					# 		name = "mask"
					# 		texture = "gfx/interface/component_masks/mask_title_big_top.dds"
					# 		spriteType = Corneredtiled
					# 		spriteborder = { 160 0 }
					# 		blend_mode = alphamultiply
					# 		alpha = 0.5
					# 	}

					# 	modify_texture = {
					# 		name = "overlay"
					# 		texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
					# 		spriteType = Corneredstretched
					# 		spriteborder = { 0 0 }
					# 		blend_mode = overlay
					# 	}
					# }

					hbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							name = "name_etc"
							layoutpolicy_horizontal = expanding
							minimumsize = { 0 35 }

							## Name
							hbox = {
								layoutpolicy_horizontal = expanding
								margin_top = 8
								margin_right = 7

								background = {
									using = Background_Area
									margin = { 15 0 }
									margin_bottom = 7
								}

								portrait_opinion = {
									visible = "[And( Character.IsAlive, Not( Character.IsPlayer ) )]"
								}

								spacer = {
									visible = "[And( Character.IsAlive, Not( Character.IsPlayer ) )]"
									size = { 8 5 }
								}

								text_multi = {
									name = "character_name"
									text = "CHARACTER_TT_NAME_AGE"
									default_format = "#high"
									using = Font_Size_Medium
									max_width = 335
									autoresize = yes
								}

								hbox = {
									margin_left = 4

									icon = {
										visible = "[Not(Character.IsDeadAndValid)]"
										size = { 23 23 }
										framesize = { 60 60 }
										frame = "[Character.GetHealthIconFrame]"
										texture = "gfx/interface/icons/character_status/icon_health.dds"
										tooltip = "[Character.GetHealthInfo]"
									}
								}

								expand = {}
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_multi = {
							name = "character_relation_to_you"
							margin_top = 10
							max_width = 308
							text = "[Character.GetRelationToString( GetPlayer )]"
							default_format = "#high"
							align = nobaseline
							autoresize = yes
						}

						expand = {}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 10
						margin_bottom = 10

						hbox = {
							name = "AI_personality"
							layoutpolicy_horizontal = expanding
							spacing = 2

							text_single = {
								visible = "[Not( Character.IsPlayer )]"
								text = "[Character.GetAIPersonality]"
								align = nobaseline
							}

							vbox = {
								layoutpolicy_vertical = expanding

								icon = {
									visible = "[Not(Character.IsFemale)]"
									size = { 20 20 }
									framesize = { 40 40 }
									frame = "[Character.GetSexualityFrame]"
									texture = "gfx/interface/icons/character_status/sexuality_icons_male.dds"
									tooltip = "SEXUALITY_TT"
								}

								icon = {
									visible = "[Character.IsFemale]"
									size = { 20 20 }
									framesize = { 40 40 }
									frame = "[Character.GetSexualityFrame]"
									texture = "gfx/interface/icons/character_status/sexuality_icons_female.dds"
									tooltip = "SEXUALITY_TT"
								}

								expand = {}
							}

							expand = {}
						}

						text_single = {
							visible = "[Character.IsAlive]"
							text = "[Character.Custom('CooltipSpouseListing')]"
							layoutpolicy_horizontal = expanding
							align = nobaseline

						}

						text_single = {
							visible = "[And( Character.HasLocation,Not(Character.IsImprisoned))]"
							layoutpolicy_horizontal = expanding
							text = "CHARACTER_LOCATION_TOOLTIP"
							align = nobaseline

						}

						text_single = {
							visible = "[Character.IsImprisoned]"
							layoutpolicy_horizontal = expanding
							text = "CHARACTER_IMPRISONED_TOOLTIP"
							align = nobaseline
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						background = {
							using = Background_Area
							margin = { 15 0 }
						}

						hbox = {
							name = "faith_and_culture"

							button_religion_icon = {
								name = "faith_button"
								datacontext = "[Character.GetFaith]"
								size = { 45 45 }
							}

							vbox = {
								margin_right = 10
								margin_left = 3

								text_single = {
									datacontext = "[Character.GetFaith]"
									layoutpolicy_horizontal = expanding
									text = "FAITH_COOLTIP_WINDOW"
									align = nobaseline

									tooltipwidget = { faith_tooltip_click = {} }

									button_normal = {
										size = { 100% 100% }
										onclick = "[DefaultOnFaithClick(Faith.GetID)]"
									}

								}

								text_single = {
									datacontext = "[Character.GetCulture]"
									layoutpolicy_horizontal = expanding
									text = "CULTURE_COOLTIP_WINDOW"
									align = nobaseline

									tooltipwidget = {
										culture_tooltip = {}
									}

									button_normal = {
										size = { 100% 100% }
										onclick = "[DefaultOnCultureClick(Culture.GetID)]"
										# shortcut = "innovations_window"
									}
								}
							}
						}

						hbox = {
							name = "house"
							datacontext = "[Character.GetHouse]"
							margin = { 10 5 }

							coa_house_small = {
								container = {
									name = "characters_status_in_house"
									parentanchor = bottom|right

									icon = {
										name = "bastard"
										visible = "[Not(Character.IsLegitimateMemberOfHouse)]"
										framesize = { 40 40 }
										frame = 4
										size = { 25 25 }
										texture = "gfx/interface/icons/portraits/relation.dds"
										tooltip = "CV_TT_BASTARD"
									}

									icon = {
										name = "head_icon"
										size = { 20 20 }
										visible = "[LessThan_int32(Character.GetDynastyHeadRelationFrame('(bool)no'), '(int32)9')]"

										texture = "gfx/interface/icons/portraits/relation.dds"
										framesize = { 40 40 }
										frame = "[Character.GetDynastyHeadRelationFrame('(bool)no')]"
										tooltip = "[Character.GetDynastyHeadTooltip]"
									}
								}
							}

							text_multi = {
								visible = "[Character.HasDynasty]"
								margin = { 5 0 }
								text = "HOUSE_VIEW_NAME_WITH_HOUSE"
								max_width = 100
								autoresize = yes
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Character.HasLandedTitles]"
					margin = { 0 5 }
					spacing = 5

					coa_realm_small_crown = {
						name = "realm_flag"

						blockoverride "coa_hover_glow_visible"
						{
							visible = no
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							name = "character_title"
							layoutpolicy_horizontal = expanding
							text = "[Character.GetPrimaryTitle.GetNameNoTooltip|U]"
							default_format = "#medium"
							using = Font_Size_Medium
						}

						text_single = {
							name = "government_type"
							layoutpolicy_horizontal = expanding
							text = "CV_REALM_TYPE"
							default_format = "#medium"
						}
					}
				}


				block "extra_info" { }

				# Keep this here for now, may want something in character view
				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "[Character.GetHeirToDesc]"
				}

				# mostly for pope
				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "CHARACTER_BIRTH_NAME_TOOLTIP"
					visible = "[Character.HasRegnalName]"
				}

				spacer = {
					size = { 10 10 }
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					block "interaction_info" { }
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "[Character.GetDebugTooltip]"
					visible = "[InDebugMode]"
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "CHARACTER_KILLER_TOOLTIP"
					visible = "[And( InDebugMode, Character.GetKiller.IsValid )]"
				}
			}

			## NULL CHARACTER
			vbox = {
				visible = "[Not( Character.IsValid )]"

				cooltip_paragraph = {
					block "portrait_button_no_character_text"
					{
						text = "CHARACTER_TOOLTIP_NO_PORTRAIT"
					}
				}
			}
		}
	}

	type cooltip_paragraph = textbox {

		name = "cooltip_paragraph"
		layoutpolicy_horizontal = expanding
		using = DefaultTooltipText
		fonttintcolor = "[TooltipInfo.GetTintColor]"
		multiline = yes
		alwaystransparent = no
		max_width = 400
	}

	type container_character_tooltip = container
	{
		alwaystransparent = no

		using = DefaultTooltipBackground

		flowcontainer = {
			direction = vertical

			widget = {
				name = "portrait area"
				size = { 100% 210 }
				# datacontext = "[GetIllustration( 'character_view_bg' )]"

				# background = {
				# 	texture = "[Illustration.GetTexture( Character.Self )]"
				# 	fittype = centercrop
				# 	margin = { -3 -5 }
				# 	margin_bottom = 10


				# 	modify_texture = {
				# 		texture = "gfx/interface/component_masks/mask_rough_edges_down_right.dds"
				# 		spriteType = Corneredtiled
				# 		spriteborder = { 20 20 }
				# 		blend_mode = alphamultiply
				# 		texture_density = 2
				# 	}
				# }

				background = {
					using = Background_Area_Dark
					margin = { -3 -3 }
					margin_bottom = 10

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
						blend_mode = alphamultiply
					}
				}

				portrait_torso = {
					name = "char"
					parentanchor = bottom|hcenter

					blockoverride "portrait_button_template_tooltip" {}
				}
			}

			container = {
				cooltip_type = {
					blockoverride "bg_visible" {
						visible = no
					}

					blockoverride "char_tooltip_opinion"
					{
						# don't show opinion again
					}
				}
			}
		}
	}

	type container_focus_cooltip = container {
		alwaystransparent = no
		object_tooltip_pop_out = {
			blockoverride "title_text" {
				text = "[FocusType.GetNameNoTooltip]"
			}
			blockoverride "description_text" {
				text = "FOCUS_TOOLTIP_TEXT_PLAYER"
			}
			blockoverride "concept_link" {
				text = [focus|E]
			}
			blockoverride "header_additions" {
				hbox = {
					margin_right = 5

					icon = {
						texture = "[FocusType.GetIcon]"
						size = { 35 35 }

						using = Master_Button_Modify_Texture
					}
				}
			}
		}
	}
}

template maa_type_container_tooltip
{
	container = {
		alwaystransparent = no
		using = GeneralTooltipSetup

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 8 8 }
			margin_bottom = 16
			spacing = 4

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 4 }

				background = {
					name = "header"
					using = Background_Area_Dark
					margin = { 5 5 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					icon = {
						size = { 40 40 }
						texture = "[MenAtArmsType.GetIcon]"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						name = "header"
						align = top|hcenter
						text = "[Localize(Concatenate(GetPlayer.Custom('ctpCulture'), MenAtArmsType.GetNameNoTooltip ))]" ###
						maximumsize = { 400 -1 }

						using = Font_Type_Flavor
						using = Font_Size_Big
					}

					spacer = {
						size = { 40 40 }
					}
				}
			}

			widget = {
				minimumsize = { 294 174 }
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 5 }

					background = {
						name = "image"
						texture = "[MenAtArmsType.GetHorizontalImage]"

						using = Mask_Rough_Edges
					}

					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding

						margin = { 0 2 }

						margin_left = 10
						tooltip = "MV_CREATE_REGIMENT_MAX_SIZE_TT"
						using = tooltip_ne

						icon = {
							name = "icon_soldier"
							texture = "gfx/interface/icons/icon_soldier.dds"
							size = { 30 30 }
						}

						text_label_left = {
							name = "soldier count"
							text = "MV_CREATE_REGIMENT_SIZE"
							default_format = "#high"
							using = Font_Size_Medium

						}

						expand = {}

					}

				}
			}

			vbox = {
				layoutpolicy_horizontal = growing
				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 20 10 }
					spacing = 2

					### INFO TEXT
					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							text = "MEN_AT_ARMS_TYPE_TOOLTIP_CREATION_COST"
						}
						expand = {}
					}
					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							text = "[MenAtArmsType.GetReinforcementCostString( GetPlayer )]"
						}
						expand = {}
					}


					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							text = "[MenAtArmsType.GetFullStrengthMaintenanceCostForPlayerString]"
						}
						expand = {}
					}
				}

				divider_light = {
					layoutpolicy_horizontal = expanding
				}
				vbox_maa_stats_numbers = {
					layoutpolicy_horizontal = expanding
				}

				hbox_maa_type_text = {
					layoutpolicy_horizontal = expanding
				}


				vbox_maa_info = {
					layoutpolicy_horizontal = expanding
				}
			}
		}

	}
}

widget = {
	alwaystransparent = no
	name = "MaaTypeTooltipDefault"
	using = GeneralTooltipSetup

	widget = {
		name = "background"
		using = DefaultTooltipBackground
		size = { 100% 100% }
		alwaystransparent = no
	}

	vbox = {
		set_parent_size_to_minimum = yes
		margin = { 8 8 }
		margin_bottom = 16
		spacing = 4

		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 4 }

			background = {
				name = "header"
				using = Background_Area_Dark
				margin = { 5 5 }
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				icon = {
					size = { 40 40 }
					texture = "[MenAtArmsType.GetIcon]"
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					name = "header"
					align = top|hcenter
					text = "[Localize(Concatenate(GetPlayer.Custom('ctpCulture'), MenAtArmsType.GetNameNoTooltip ))]" ###
					maximumsize = { 400 -1 }

					using = Font_Type_Flavor
					using = Font_Size_Big

				}

				spacer = {
					size = { 40 40 }
				}
			}
		}

		widget = {
			minimumsize = { 294 174 }
			layoutpolicy_horizontal = expanding

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 5 }

				background = {
					name = "image"
					texture = "[MenAtArmsType.GetHorizontalImage]"

					using = Mask_Rough_Edges
				}

				expand = {}


				hbox = {
					layoutpolicy_horizontal = expanding

					margin = { 0 2 }

					margin_left = 10
					tooltip = "MV_CREATE_REGIMENT_MAX_SIZE_TT"
					using = tooltip_ne

					icon = {
						name = "icon_soldier"
						texture = "gfx/interface/icons/icon_soldier.dds"
						size = { 30 30 }
					}

					text_label_left = {
						name = "soldier count"
						text = "MV_CREATE_REGIMENT_SIZE"
						default_format = "#high"
						using = Font_Size_Medium

					}

					expand = {}

				}

			}
		}

		vbox = {
			layoutpolicy_horizontal = growing
			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 20 10 }
				spacing = 2

				### INFO TEXT
				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						text = "Creation Cost: [MenAtArmsType.GetCostString( GetPlayer )]"
					}
					expand = {}
				}
				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						text = "[MenAtArmsType.GetReinforcementCostString( GetPlayer )]"
					}
					expand = {}
				}


				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						text = "[MenAtArmsType.GetFullStrengthMaintenanceCostForPlayerString]"
					}
					expand = {}
				}
			}

			divider_light = {
				layoutpolicy_horizontal = expanding
			}
			vbox_maa_stats_numbers = {
				layoutpolicy_horizontal = expanding
			}
			hbox_maa_type_text = {
				layoutpolicy_horizontal = expanding
			}

			vbox_maa_info = {
				layoutpolicy_horizontal = expanding
			}
		}
	}

	datacontext = "[GetPlayer]"
}

container = {
	alwaystransparent = no
	name = "MaaTypeTooltipSpecific"
	using = regiment_container_tooltip
	datacontext = "[Regiment.GetMAAType]"
	datacontext = "[Regiment.GetOwner]"
}

template regiment_container_tooltip
{
	widget = {
		alwaystransparent = no
		using = GeneralTooltipSetup

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 8 8 }
			margin_bottom = 16
			spacing = 4

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 4 }

				background = {
					name = "header"
					using = Background_Area_Dark
					margin = { 5 5 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					icon = {
						size = { 40 40 }
						texture = "[Regiment.GetMAAType.GetIcon]"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						name = "header"
						align = top|hcenter
						text = "[Localize(Concatenate( Regiment.GetOwner.Custom('ctpCulture'), Regiment.GetNameNoTooltip ))]"
						maximumsize = { 400 -1 }

						using = Font_Type_Flavor
						using = Font_Size_Big

					}
					spacer = {
						size = { 40 40 }
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				widget = {
					minimumsize = { 294 174 }

					datacontext = "[Regiment.GetMAAType]"

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 0 5 }

						background = {

							name = "image"
							texture = "[MenAtArmsType.GetHorizontalImage]"

							using = Mask_Rough_Edges
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							expand = {}

							text_label_right = {
								text = "[SelectLocalization(Regiment.IsRaised, 'MAA_RAISED', 'MAA_UNRAISED')]"
								using = Font_Size_Medium
							}

							spacer = {
								size = {10 0}
							}
						}

						expand = {}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 6
							margin = { 0 2 }

							hbox = {
								margin_left = 10

								icon = {
									name = "icon_soldier"
									texture = "gfx/interface/icons/icon_soldier.dds"
									size = { 30 30 }
								}

								text_label_left = {
									text = "[Regiment.BuildCurrentRegimentCountString]"
									default_format = "#high"
									using = Font_Size_Medium
								}
							}

							expand = {}

							text_label_right = {
								text = "REGIMENT_CURRENT_SIZE"

								default_format = "#high"
								using = Font_Size_Medium
							}

							spacer = {
								size = {10 0}
							}

						}
					}
				}
			}

			vbox = {
				datacontext = "[Regiment.GetMAAType]"
				layoutpolicy_horizontal = growing

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Regiment.IsRegular]"
					margin = { 20 10 }
					spacing = 2

					### INFO TEXT
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "MAA_REINFORCEMENT_COST_ENTRY"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "MAA_MAINTENANCE"
					}
				}

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				vbox_maa_stats_numbers = {
					layoutpolicy_horizontal = expanding
				}
				hbox_maa_type_text = {
					layoutpolicy_horizontal = expanding
				}

				vbox_maa_info = {
					layoutpolicy_horizontal = expanding
				}
			}

			block "extra_info" {}
		}
	}
}

template regiment_container_text_tooltip
{
	widget = {
		alwaystransparent = no
		using = GeneralTooltipSetup
		datacontext = "[Regiment.GetMAAType]"
		datacontext = "[Regiment.GetOwner]"

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 8 8 }
			margin_bottom = 16
			spacing = 4

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 4 }

				background = {
					name = "header"
					using = Background_Area_Dark
					margin = { 5 5 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					icon = {
						size = { 40 40 }
						texture = "[Regiment.GetMAAType.GetIcon]"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						name = "header"
						align = top|hcenter
						text = "[Localize(Concatenate( Regiment.GetOwner.Custom('ctpCulture'), Regiment.GetNameNoTooltip ))]"
						maximumsize = { 400 -1 }

						using = Font_Type_Flavor
						using = Font_Size_Big

					}
					spacer = {
						size = { 40 40 }
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 15 0 }
				margin_top = 5
				spacing = 10

				hbox = {
					layoutpolicy_horizontal = expanding

					text_label_left = {
						text = "[SelectLocalization(Regiment.IsRaised, 'MAA_RAISED', 'MAA_UNRAISED')]"
						using = Font_Size_Medium
						align = right
					}

					expand = {}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					hbox = {
						icon = {
							name = "icon_soldier"
							texture = "gfx/interface/icons/icon_soldier.dds"
							size = { 30 30 }
						}
						text_single = {
							text = "[Regiment.BuildCurrentRegimentCountString]"
							default_format = "#high"
							# using = Font_Size_Medium
						}


					}

					# expand = {}
					text_single = {
						text = ",  "

						default_format = "#high"
						# using = Font_Size_Medium
					}

					text_single = {
						text = "REGIMENT_CURRENT_SIZE"

						default_format = "#high"
						# using = Font_Size_Medium
					}

					expand = {}

				}
			}

			vbox = {
				datacontext = "[Regiment.GetMAAType]"
				layoutpolicy_horizontal = growing

				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Regiment.IsRegular]"
					spacing = 2
					margin = { 15 5 }

					### INFO TEXT
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "MAA_REINFORCEMENT_COST_ENTRY"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "MAA_MAINTENANCE"
					}
				}

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				vbox_maa_stats_numbers = {
					layoutpolicy_horizontal = expanding
				}
				hbox_maa_type_text = {
					layoutpolicy_horizontal = expanding
				}

				vbox_maa_info = {
					layoutpolicy_horizontal = expanding
				}
			}

			block "extra_info" {}
		}
	}
}

template unit_icon_item_tooltip {

	widget = {
		alwaystransparent = no
		using = GeneralTooltipSetup
		datacontext = "[UnitItem.GetArmy]"

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 12 8 }
			margin_bottom = 16
			spacing = 4

			hbox = {
				name = "FancyHeader"
				alwaystransparent = no
				layoutpolicy_horizontal = expanding

				coa_realm_small = {
					datacontext = "[UnitItem.GetOwner]"
					tintcolor = "[TooltipInfo.GetTintColor]"
				}

				text_single = {
					layoutpolicy_vertical = expanding
					name = "title"
					align = top|left
					margin_top = 6
					margin_right = 20
					text = "[UnitItem.GetTooltipHeader]"
					fonttintcolor = "[TooltipInfo.GetTintColor]"
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				soldiers_and_quality_small = {
					datacontext = [Army.GetComposition]
				}
				expand = {}
			}
			hbox = {
				name = "troop_breakdown"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				dynamicgridbox = {
					name = "troops"
					datamodel = "[CalculateBreakdownItems(Army.Self)]"

					datamodel_wrap = 5
					flipdirection = yes
					maxverticalslots = 2

					item = {
						widget = {
							hbox = {
								margin_right = 4
								set_parent_size_to_minimum = yes
								tooltip = "ARMY_VIEW_TROOP_TT"

								highlight_icon = {
									name = "men_at_arms_icon"
									visible = "[TroopItem.IsMaa]"
									size = { 35 35 }
									texture = "[TroopItem.GetRegiment.GetRegiment.GetMAAType.GetIcon]"
								}

								highlight_icon = {
									name = "levies_icon"
									visible = "[TroopItem.IsLevies]"
									size = { 35 35 }
									texture = "gfx/interface/icons/icon_soldier.dds"
								}

								highlight_icon = {
									name = "knight_icon"
									visible = "[TroopItem.IsKnight]"
									size = { 35 35 }
									texture = "gfx/interface/icons/icon_knight_small.dds"
								}
								text_single = {
									layoutpolicy_horizontal = growing
									text = "[TroopItem.GetCount|*]"
								}

							}
						}
					}
				}
				expand = {
					layoutpolicy_vertical = expanding
				}
			}
			divider_light =
			{
				layoutpolicy_horizontal = expanding
			}

			hbox = {
				datacontext = "[Army.GetCommander]"
				visible = "[Character.IsValid]"
				layoutpolicy_horizontal = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "ARMY_TOOLTIP_COMMANDER"
				}

				hbox = {
					tooltip = "[Character.GetCommanderAdvantageDesc]"
					icon = {
						name = "skill_icon"
						texture = "gfx/interface/icons/icon_commander_advantage.dds"
						size = { 30 30 }
					}
					text_single = {
						text = "ARMY_TOOLTIP_COMMANDER_ADVANTAGE"
					}
				}
			}

			text_single = {
				visible = "[Not( Army.GetCommander.IsValid )]"
				layoutpolicy_horizontal = expanding
				text = "ARMY_TOOLTIP_NO_COMMANDER"
			}

			expand = {}

			hbox = {
				layoutpolicy_horizontal = expanding
				visible = "[UnitItem.IsRulerCommander]"
				margin_left = 4

				icon = {
					texture = "gfx/interface/icons/map_icons/commander_is_leader.dds"
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					datacontext = "[UnitItem.GetUnitPortraitCharacter]"
					text = "COMMANDER_IS_LEADER"
					align = nobaseline
				}
			}
			hbox = {
				visible = "[UnitItem.HasDisembarkPenalty]"
				layoutpolicy_horizontal = expanding
				margin_left = 4

				icon = {
					name = "sea_sickness_icon"
					size = { 24 24 }
					texture = "gfx/interface/icons/map_icons/army_icon_disembarked.dds"
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[Army.GetEmbarkInfoForTooltip]"
					align = nobaseline
				}
			}

			hbox = {
				visible = "[UnitItem.IsGathering]"
				layoutpolicy_horizontal = expanding
				margin_left = 4

				icon = {
					texture = "gfx/interface/icons/map_icons/army_icon_gathering.dds"
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = "ARMY_TOOLTIP_IS_GATHERING"
					align = nobaseline
				}
			}


			vbox = {
				visible = "[Not(Army.IsNeutralToPlayer)]"
				layoutpolicy_horizontal = expanding
				spacing = 4
				hbox = {
					layoutpolicy_horizontal = expanding
					margin_left = 4
					tooltip = "ARMY_ATTRITION_TT"
					visible = "[GreaterThan_CFixedPoint( Army.GetArmyAttritionPercentage, '(CFixedPoint)0' )]"
					icon = {
						texture = "gfx/interface/icons/map_icons/attrition_icon.dds"
						size = { 24 24 }
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						name = "attrition"
						text = "ARMY_TOOLTIP_ATTRITION"
						align = nobaseline
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_left = 4

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[Army.GetSupplyInfoForTooltip]"
						align = nobaseline
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Army.IsMoving]"
					margin_left = 4
					icon = {
						name = "unit_retreating"
						visible = "[UnitItem.IsRetreating]"
						texture = "gfx/interface/icons/map_icons/army_icon_retreating.dds"
					}
					icon = {
						name = "unit_moving"
						visible = "[Not(UnitItem.IsRetreating)]"
						texture = "gfx/interface/icons/combat_effects/moving_army.dds"
						size = { 24 24 }
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[Army.GetMovementInfoForTooltip]"
						align = nobaseline
					}
				}

				hbox = {
					visible = "[UnitItem.IsMovementLocked]"
					layoutpolicy_horizontal = expanding
					margin_left = 4

					icon = {
						texture = "gfx/interface/icons/map_icons/movement_locked.dds"
						size = { 24 24 }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "ARMY_TOOLTIP_IS_MOVEMENT_LOCKED"
						align = nobaseline
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				visible = "[UnitItem.GetArmy.IsRaidArmy]"
				margin_left = 4

				hbox = {
					visible = "[UnitItem.GetArmy.IsRaidLootCapped]"
					tooltip = ARMY_AT_LOOT_CAP_TOOLTIP
					layoutpolicy_horizontal = expanding

					icon = {
						texture = "gfx/interface/icons/map_icons/army_icon_at_loot_cap.dds"
						size = { 24 24 }
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "ARMY_AT_LOOT_CAP"
						align = nobaseline
					}
				}


				text_single = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(UnitItem.GetArmy.IsRaidLootCapped)]"
					text = "ARMY_LOOT_INFO"
					align = nobaseline
				}
			}

			block "extra_unit_info" {}

			text_single = {
				visible = "[And( InDebugMode, Not(ReleaseMode) )]"
				# Deliberately unlocalized since this is debug functionality
				layoutpolicy_horizontal = expanding
				text = "Army: [Army.GetArmyId] Unit: [Army.GetUnitId]"
				align = nobaseline
			}

			text_single = {
				visible = "[And( InDebugMode, Not(ReleaseMode) )]"
				# Deliberately unlocalized since this is debug functionality
				layoutpolicy_horizontal = expanding
				text = "#E AI Coordinator: [Army.GetAiCoordinatorId]#!"
				align = nobaseline
				tooltip = "Stack: [Army.GetAiUnitStackId] Sub: [Army.GetAiSubUnitStackId]"
			}

			text_multi = {
				visible = "[And( InDebugMode, Not(ReleaseMode) )]"
				# Deliberately unlocalized since this is debug functionality
				layoutpolicy_horizontal = expanding
				autoresize = yes
				text = "[Army.GetAIInfo]"
				align = nobaseline
			}
		}
	}
}

template unit_icon_tooltip {
	container = {
		using = GeneralTooltipSetup

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		alwaystransparent = no

		flowcontainer = {
			datamodel = "[UnitMapIcon.GetUnitItems]"
			visible = "[GreaterThan_int32(GetDataModelSize(UnitMapIcon.GetUnitItems), '(int32)1')]"
			direction = vertical
			spacing = 5
			margin = { 30 15 }
			margin_right = 20


			text_single = {
				text = "ARMY_ICON_HEADER"
			}

			item = {
				flowcontainer = {
					spacing = 5
					ignoreinvisible = yes

					container_allied_unit_icon_item = {
						blockoverride "unit_items" {}
						blockoverride "multi_select" {}
						blockoverride "onclick" {
							onclick = "[UnitMapIcon.OnClickArmy( Army.Self )]"
						}
						min_width = 120
					}
					container_hostile_unit_icon_item = {
						blockoverride "unit_items" {}
						blockoverride "multi_select" {}
						min_width = 120
					}

					text_single = {
						text = "- [UnitItem.GetArmy.GetNameNoTooltip]"
					}

					tooltipwidget = {
						using = unit_icon_item_tooltip
					}

					using = tooltip_es
				}
			}
		}
		container = {
			visible = "[EqualTo_int32(GetDataModelSize(UnitMapIcon.GetUnitItems), '(int32)1')]"
			datamodel = "[UnitMapIcon.GetUnitItems]"

			item = {
				using = unit_icon_item_tooltip
			}
		}
	}
}

container = {
	name = "UnitTooltipWidget"
	using = unit_icon_item_tooltip
}

template faith_tooltip_click_default_extra_info
{
	divider_light = {
		layoutpolicy_horizontal = expanding
	}
	text_single = {
		layoutpolicy_horizontal = expanding
		text = "FAITH_ITEM_TOOLTIP"
		margin = { 10 0 }
	}
}

template faith_tooltip_core_tenents_extra_info
{
	divider_light = {
		layoutpolicy_horizontal = expanding
	}
	text_label_center = {
		text = "FAITH_CORE_TENETS_HEADING"
	}
	hbox = {
		name = "doctrines"
		datamodel = "[Faith.GetDoctrines]"
		spacing = 10
		item = {
			name = "doctrine_item"
			container_tenet_item = {
				visible = "[EqualTo_string( FaithDoctrine.GetGroup.GetGroupingKey, 'core_tenets' )]"
				tooltip = FAITH_WINDOW_DOCTRINE_TOOLTIP_WITH_FAITH
			}
		}
	}
}

template faith_tooltip_ruler_designer_extra_info
{
	spacer = {
		size = { 0 4 }
	}
	divider_light = {
		layoutpolicy_horizontal = expanding
	}
	text_single = {
		text = RULER_DESIGNER_LIST_FAITH_ENTRY_SELECT_TOOLTIP
	}
}

template holding_tooltip_click_default_extra_info
{
	text_single = {
		layoutpolicy_horizontal = expanding
		text = "HOLDING_CLICK_TOOLTIP"
		margin = { 0 10 }
	}
}

types HoldingTooltips
{
	type holding_tooltip = widget
	{
		alwaystransparent = no
		using = GeneralTooltipSetup
		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}
		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 12 8 }
			margin_bottom = 16
			spacing = 4

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 0 4 }
				background = {
					name = "header"
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					spriteType = Corneredstretched
					align = vcenter|left
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 160 0 }
						blend_mode = alphamultiply
						alpha = 0.5
					}

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
					}
				}
				hbox = {
					layoutpolicy_horizontal = expanding
					text_single = {
						layoutpolicy_horizontal = expanding
						name = "header"
						text = "[Holding.GetNameNoTooltip]"
						align = top
						using = Font_Type_Flavor
						using = Font_Size_Big
						min_width = 300
					}

					text_single = {
						text = "[holding|E]"
						align = top
					}
				}
			}

			vbox = {
				spacing = 2
				margin = { 8 0 }
				layoutpolicy_horizontal = expanding

				vbox = {
					visible = "[Not(Holding.IsEmpty)]"
					spacing = 4
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "HOLDING_TT_TYPE"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "HOLDING_TT_TITLE"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "HOLDING_TT_HOLDER"
					}

					text_single = {
						visible = "[Holding.GetProvince.GetTitle.IsLeasedOut]"
						layoutpolicy_horizontal = expanding
						text = "HOLDING_TT_LEASED"
					}


					text_single = {
						layoutpolicy_horizontal = expanding
						text = [Holding.GetTooltip]
					}
				}

				text_single = {
					visible = "[Holding.IsEmpty]"
					layoutpolicy_horizontal = expanding
					text = "HOLDING_TT_EMPTY"
				}

				hbox = {
					layoutpolicy_horizontal = growing
					spacing = 12
					datacontext = "[Holding.GetProvince.GetTerrain]"
					tooltipwidget = terrain_tooltip
					using = tooltip_ws
					text_single = {
						text = "HOLDING_TT_TERRAIN"
					}
					icon = {
						name = "terrain"
						texture = "[Terrain.GetIcon]"
						size = { 35 35 }
					}
					expand = {}
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = "HOLDING_TT_SUPPLY"
				}

				block "extra_info" {}
			}
		}
	}

	type holding_tooltip_click = holding_tooltip
	{
		blockoverride "extra_info" {
			using = holding_tooltip_click_default_extra_info
		}
	}
}

types FaithTooltips
{
	type faith_tooltip = widget
	{
		alwaystransparent = no
		using = GeneralTooltipSetup
		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}
		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 12 8 }
			margin_bottom = 16
			spacing = 4

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 0 4 }

				background = {
					name = "header"
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					spriteType = Corneredstretched
					texture_density = 2
					margin = { 15 0 }

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 160 0 }
						blend_mode = alphamultiply
						alpha = 0.5
					}

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					icon = {
						size = { 60 60 }
						texture = "[Faith.GetIcon]"
					}

					vbox = {
						layoutpolicy_vertical = expanding
						text_single = {
							layoutpolicy_horizontal = expanding
							name = "header"
							text = "[Faith.GetNameNoTooltip]"
							align = top
							using = Font_Type_Flavor
							using = Font_Size_Big

						}
						text_single = {
							visible = "[And( Not( Faith.GetReligion.HasPaganRoots ), Not( Faith.IsUnreformed ) )]"
							layoutpolicy_horizontal = expanding
							text = "FAITH_VIEW_SUBHEADING"
							align = top
						}
						text_single = {
							visible = "[Faith.IsUnreformed]"
							layoutpolicy_horizontal = expanding
							text = "FAITH_VIEW_UNREFORMED_SUBHEADING"
							align = top
						}
						text_single = {
							visible = "[And( Faith.GetReligion.HasPaganRoots, Not( Faith.IsUnreformed ) )]"
							layoutpolicy_horizontal = expanding
							text = "FAITH_VIEW_REFORMED_SUBHEADING"
							align = top
						}
						expand = {
							layoutpolicy_vertical = growing
						}
					}
					expand = {
						layoutpolicy_horizontal = growing
					}
				}
			}

			vbox = {
				spacing = 4
				margin = { 8 0 }
				vbox = {
					layoutpolicy_horizontal = expanding

					visible = "[And( GetPlayer.IsValid, Not(ObjectsEqual( GetPlayer.GetFaith, Faith.Self )))]"

					text_single = {
						name = "our_view"
						layoutpolicy_horizontal = expanding
						text = FAITH_VIEW_OUR_VIEW
						align = top
					}

					text_single = {
						name = "their_view"
						layoutpolicy_horizontal = expanding
						text = FAITH_VIEW_THEIR_VIEW
						align = top
					}
				}
				hbox = {
					layoutpolicy_horizontal = expanding
					name = "fervor_container"
					tooltip = "FERVOR_TT"

					# Fervor
					icon = {
						texture = "gfx/interface/icons/icon_fervor.dds"
						size = { 22 22 }
					}

					text_single = {
						text = "FAITH_WINDOW_FERVOR"
						default_format ="#medium"
					}

					# Arrow indicating increase or decrease
					icon = {
						texture = "gfx/interface/icons/icon_trend_arrow.dds"
						framesize = { 22 22 }
						frame = "[Select_int32( GreaterThanOrEqualTo_CFixedPoint( Faith.GetMonthlyFervorChange, '(CFixedPoint)0' ), '(int32)1', '(int32)2' )]"
					}
					expand = {}
				}


				text_single = {
					layoutpolicy_horizontal = growing
					visible = "[Faith.HasDoctrineByKey( 'doctrine_no_head' )]"
					text = "FAITH_TOOLTIP_DOCTRINE_NO_HEAD_OF_FAITH"
				}

				text_single = {
					layoutpolicy_horizontal = growing
					visible = "[And( Not(Faith.HasDoctrineByKey( 'doctrine_no_head' )), Not( Faith.GetReligiousHead.IsValid ) ) ]"
					text = "FAITH_TOOLTIP_DOCTRINE_VACANT_HEAD_OF_FAITH"
				}

				text_single = {
					layoutpolicy_horizontal = growing
					visible = "[And( Not(Faith.HasDoctrineByKey( 'doctrine_no_head' )), Faith.GetReligiousHead.IsValid ) ]"
					text = "FAITH_TOOLTIP_DOCTRINE_HEAD_OF_FAITH"
				}

				spacer = {
					size = { 0 4 }
				}
				divider_light = {
					layoutpolicy_horizontal = growing
				}
				text_multi = {
					max_width = 400
					margin = { 0 4 }
					text = "#F [Faith.GetFlavorDesc]#!"
					autoresize = yes
				}

				block "extra_info" {}
			}
		}
	}
	type faith_tooltip_click = faith_tooltip
	{
		blockoverride "extra_info"
		{
			using = faith_tooltip_click_default_extra_info
		}
	}
	type faith_tooltip_core_tenents = faith_tooltip
	{
		blockoverride "extra_info"
		{
			using = faith_tooltip_core_tenents_extra_info
		}
	}
	type faith_tooltip_ruler_designer = faith_tooltip
	{
		blockoverride "extra_info"
		{
			using = faith_tooltip_core_tenents_extra_info
			using = faith_tooltip_ruler_designer_extra_info
		}
	}
}

container = {
	alwaystransparent = no
	name = "FaithTooltip"
	faith_tooltip = {}
}

template religion_tooltip {
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[Religion.GetNameNoTooltip] #weak ([Religion.GetFamily.GetName])#!"
		}

		blockoverride "concept_link" {
			text = [religion|E]
		}
		blockoverride "description_text" {
			text = "[Religion.GetFlavorDesc]"
		}
	}
}
container = {
	alwaystransparent = no
	name = "ReligionTooltip"
	using = religion_tooltip
}

container = {
	alwaystransparent = no
	name = "ReligionFamilyTooltip"
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[ReligionFamily.GetNameNoTooltip]"
		}

		blockoverride "concept_link" {
			text = [religious_family|E]
		}
		blockoverride "description_text" {
			text = "RELIGION_FAMILY_TOOLTIP"
		}
	}
}

container = {
	alwaystransparent = no
	name = "SchemeTooltip"
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[Scheme.GetNameNoTooltip]"
		}

		blockoverride "concept_link" {
			text = [scheme|E]
		}
		blockoverride "description_text" {
			text = "[Scheme.GetTypeDescription]"
		}
	}
}

container = {
	alwaystransparent = no
	name = "FactionTooltip"
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[Faction.GetNameNoTooltip]"
		}

		blockoverride "concept_link" {
			text = [faction|E]
		}
		blockoverride "description_text" {
			text = "[Faction.GetDescription]"
		}
	}
}


container = {
	alwaystransparent = no
	name = "DynastyTooltip"
	using = DynastyTooltip
}

template DynastyTooltip {
	object_tooltip_pop_out = {

		blockoverride "header_additions" {
			coa_dynasty_small = {
				blockoverride "coa_tooltip" {}
			}
		}

		blockoverride "title_text" {

			text = "[dynasty|E] [Dynasty.GetNameNoTooltip]"
		}

		blockoverride "concept_link" {
			text = [dynasty|E]
		}

		blockoverride "extra_data" {
			cooltip_paragraph = {
				text = "DYNASTY_VIEW_MY_DYNASTY"
				visible = "[Dynasty.IsMyDynasty(GetPlayer)]"
			}
			cooltip_paragraph = {
				datacontext = [Dynasty]
				text = "DYNASTY_TT_MEMBERS"
			}
			cooltip_paragraph = {
				datacontext = [Dynasty]
				text = "DYNASTY_TT_DYNAST"
			}
			cooltip_paragraph = {
				datacontext = [Dynasty]
				text = "DYNASTY_TT_SPLENDOR_LEVEL"
			}
			cooltip_paragraph = {
				text = "DYNASTY_VIEW_PRESTIGE"
			}
		}
	}
}

container = {
	alwaystransparent = no
	name = "BuildingTooltip"
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[Building.GetNameNoTooltip]"
		}

		blockoverride "concept_link" {
			text = [building|E]
		}
		blockoverride "description_text" {
			text = "[Building.GetDescription]"
		}
	}
}

container = {
	name = "ArmyTooltip"
	using = unit_icon_item_tooltip
}

container = {
	alwaystransparent = no
	name = "HoldingTooltipDefault"
	holding_tooltip = {}
}

types Cooltips
{
	type LandedTitleTooltipBase = object_tooltip_pop_out {
		blockoverride "header_additions" {
			margin_bottom = 5

			coa_title_small_crown = {
				size = { 40 50 }
				blockoverride "coa_tooltip" {}
				blockoverride "coa_hover_glow_visible"
				{
					visible = no
				}
			}
		}

		blockoverride "title_text" {
			text = "[Title.GetNameWithUnderlyingNoTooltip|U]"
		}

		blockoverride "subheading" {
			vbox_title_type_text = {
				layoutpolicy_horizontal = expanding
			}
		}

		blockoverride "description_text" {
			text = "[Title.GetCOADefaultTooltip]"
		}

		blockoverride "concept_link" {
			text = [title|E]
		}

		blockoverride "extra_data" {
			textbox = {
				using = DefaultTooltipText
				multiline = yes
				fonttintcolor = "[TooltipInfo.GetTintColor]"
				block "highlight_text" {}
			}
		}
	}
}

template LandedTitleTooltip {
	LandedTitleTooltipBase = {
		blockoverride "input_info_text" {
			text = "[Title.GetClickInfo]"
		}
	}
}

template LandedTitleTooltipTextLink {
	LandedTitleTooltipBase = {
		blockoverride "input_info_text" {
			text = "CLICK_TO_VIEW"
		}
	}
}

template LandedTitleTooltipNoClickInfo {
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[Title.GetNameNoTooltip]"
		}

		blockoverride "concept_link" {
			text = [title|E]
		}
		blockoverride "description_text" {
			text = "[Title.GetCOADefaultTooltip]"
		}
	}
}

container = {
	alwaystransparent = no
	name = "LandedTitleTooltip"
	using = LandedTitleTooltip

	#blockoverride "jonas_test" {}
}

container = {
	alwaystransparent = no
	name = "LandedTitleTooltipTextLink"
	using = LandedTitleTooltipTextLink
}

container = {
	alwaystransparent = no
	name = "GovernmentTypeTooltip"
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[GovernmentType.GetNameNoTooltip]"
		}

		blockoverride "concept_link" {
			text = [government|E]
		}
		blockoverride "description_text" {
			text = GOVERNMENT_TYPE_DESCRIPTION
		}
	}
}

container = {
	alwaystransparent = no
	name = "ObligationlevelTooltip"
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[ObligationLevel.GetName]"
		}
		blockoverride "concept_link" {
			text = [feudal_contract|E]
		}
		blockoverride "description_text" {
			text = "[ObligationLevel.GetEffectText]"
		}
	}
}

container = {
	alwaystransparent = no
	name = "StaticModifierTooltip"
	object_tooltip_pop_out = {
		blockoverride "header_additions" {
			hbox = {
				margin_right = 5
				icon = {
					size = { 32 32 }
					texture = "[StaticModifier.GetIcon]"
					tintcolor = "[TooltipInfo.GetTintColor]"
				}
			}
		}
		blockoverride "title_text" {
			text = "[StaticModifier.GetName]"
		}
		blockoverride "concept_link" {
			text = ""
		}
		blockoverride "description_text" {
			margin_left = 30
			text = "[StaticModifier.GetDesc]"
		}
	}
}

types LawTooltipTypes
{
	type law_tooltip_header_additions = hbox {
		margin_right = 5
		icon = {
			size = { 60 60 }
			# texture = "[Law.GetIcon]" # TODO A code solution would be better
			# using = Master_Button_Modify_Texture
			tintcolor = "[TooltipInfo.GetTintColor]"
		}
	}

	type pass_law_tooltip = container {
		alwaystransparent = no
		object_tooltip_pop_out = {
			blockoverride "header_additions" {
				#law_tooltip_header_additions = {}
			}
			blockoverride "title_text" {
				text = "PASS_LAW_TOOLTIP_TITLE"
			}

			blockoverride "subtitle_text" {
				text = "LAW_TOOLTIP_SUBTITLE"
			}


			blockoverride "concept_link" {
				text = [law|E]
			}
			blockoverride "extra_data" {
				cooltip_paragraph = {
					text = "[GuiLaw.GetCanEnactDescription]"
				}
				cooltip_paragraph = {
					text = "[Law.GetEffectDescription]"
				}
				cooltip_paragraph = {
					text = "[GuiLaw.GetEnactEffectDescription]"
				}
				cooltip_paragraph = {
					text = "LAW_COST"
					visible = "[And( GuiLaw.HasCost, Not( GuiLaw.IsEnacted ) )]"
					tooltip = "[GuiLaw.GetCostDescription]"
				}
				cooltip_paragraph = {
					visible = "[GuiLaw.CanEnact]"
					text = "CLICK_TO_PASS_LAW"
				}
			}
		}
	}

	type general_law_tooltip = object_tooltip_pop_out {
		blockoverride "header_additions" {
			law_tooltip_header_additions = {}
		}
		blockoverride "title_text" {
			text = "LAW_TOOLTIP_TITLE"
		}

		blockoverride "subtitle_text" {
			text = "LAW_TOOLTIP_SUBTITLE"
		}

		blockoverride "concept_link" {
			text = [law|E]
		}
		blockoverride "extra_data" {
			cooltip_paragraph = {
				text = "[Law.GetEffectDescription]"
			}
		}
	}
}

container = {
	alwaystransparent = no
	name = "LawTooltip"
	general_law_tooltip = {}
}

template terrain_tooltip {
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[Terrain.GetNameNoTooltip]"
		}

		blockoverride "concept_link" {
			text = [terrain|E]
		}
		blockoverride "description_text" {
			text = "TERRAIN_DESCRIPTION"
		}
	}
}
container = {
	alwaystransparent = no
	name = "TerrainTooltip"
	using = terrain_tooltip
}


template dynasty_house_tooltip {
	object_tooltip_pop_out = {
		datacontext = "[DynastyHouse]"
		blockoverride "header_additions" {
			coa_house_small = {
				blockoverride "coa_tooltip" {}
			}
		}

		blockoverride "title_text" {
			text = "HOUSE_TT_NAME"
		}

		blockoverride "subtitle_text" {
			text = "HOUSE_VIEW_MOTTO"
			default_format = "#weak"
		}

		blockoverride "concept_link" {
			text = [house|E]
		}
		blockoverride "extra_data" {
			cooltip_paragraph = {
				name = "my_house"
				visible = "[DynastyHouse.IsPlayerMember]"
				text = "HOUSE_VIEW_PLAYER_IS_MEMBER"
			}
			cooltip_paragraph = {
				name = "dynasty"
				text = "DYNASTY_HOUSE_TT_DYNASTY"
			}
			cooltip_paragraph = {
				name = "dynasty_level"
				text = "DYNASTY_HOUSE_TT_DYNASTY_LEVEL"
			}
			cooltip_paragraph = {
				name = "house_head"
				text = "DYNASTY_HOUSE_TT_HEAD_OF_HOUSE"
			}
			cooltip_paragraph = {
				name = "living_members"
				text = "DYNASTY_HOUSE_TT_LIVING_MEMBERS"
			}

			cooltip_paragraph = {
				name = "click"
				text = "VIEW_CLICK"
				default_format = "#I"
			}
		}
	}
}

container = {
	alwaystransparent = no
	name = "DynastyHouseTooltip"
	using = dynasty_house_tooltip
}

### These templates can very likely be extended to most custom tooltips with header, blocker, effects, flavor, etc

local_template era_innov_blockers
{
	minimumsize = { 100% 0 }

	block "eib_visible"
	{
		visible = yes
	}

	text_multi = {
		block "eib_text"
		{
			text = "..."
		}

		autoresize = yes
		fonttintcolor = "[TooltipInfo.GetTintColor]"
		using = DefaultTooltipText
	}
}

local_template era_innov_effects
{
	flowcontainer = {
		name = "effects"

		minimumsize = { 100% 0 }

		direction = vertical
		ignoreinvisible = yes

		text_single = {
			text = "INNOVATION_ERA_TOOLTIP_EFFECTS"
		}

		textbox = {
			autoresize = yes
			fonttintcolor = "[TooltipInfo.GetTintColor]"
			using = DefaultTooltipText

			block "eie_effects"
			{
				text = "..."
			}
		}
	}
}

# progress

local_template era_innov_flavor
{
	textbox = {
		name = "description"

		autoresize = yes
		fonttintcolor = "[TooltipInfo.GetTintColor]"
		using = DefaultTooltipText
		multiline = yes
		default_format = "#F"

		block "eif_text"
		{
			text = "..."
		}
	}
}

template culture_innovation_tooltip {
	container = {
		using = GeneralTooltipSetup
		alwaystransparent = no
		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		flowcontainer = {
			margin = { 20 20 }
			spacing = 15
			direction = vertical
			ignoreinvisible = yes
			datacontext = "[CultureInnovation.GetType]"

			widget = {
				name = "header"
				size = { 500 60 }

				background = {
					using = Background_Area_Dark
					margin = { 15 10 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 500 0 }
					set_parent_size_to_minimum = yes

					widget = {
						size = { 90 60 }
						icon = {
							texture = "[CultureInnovationType.GetIcon]"
							size = { 90 60 }

							using = Mask_Rough_Edges
						}

						icon = {
							visible = "[Not(CultureInnovation.CanGainProgress)]"
							texture = "[CultureInnovationType.GetIcon]"
							tintcolor = { 0 0 0 0.5 }
							size = { 90 60 }

							using = Mask_Rough_Edges
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						margin = { 10 0 }
						text = "[CultureInnovation.GetNameNoTooltip|T]"
					}

					expand = {}

					vbox = {
						text_single = {
							layoutpolicy_horizontal = expanding
							align = right
							text = "INNOVATION_TOOLTIP_TYPE"
						}

						spacer = {
							size = { 5 5 }
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							align = right
							text = "INNOVATION_TOOLTIP_ERA"
						}
					}
				}
			}

			container = {
				name = "fascination"
				using = era_innov_blockers
				visible = "[CultureInnovation.IsFascination]"
				minimumsize = { 500 0 }

				background = {
					using = Background_Area_Dark
					margin = { 15 5 }
					alpha = 0.6
				}

				blockoverride "eib_text"
				{
					text = "INNOVATION_FASCINATION_MARKER_TOOLTIP"
				}
			}

			container = {
				name = "exposure"
				using = era_innov_blockers
				visible = "[CultureInnovation.HasExposureMarker]"
				minimumsize = { 500 0}

				background = {
					using = Background_Area_Dark
					margin = { 15 5 }
					alpha = 0.6
				}

				blockoverride "eib_text"
				{
					text = "INNOVATION_EXPOSURE_MARKER_TOOLTIP"
				}
			}

			container = {
				name = "blocked_for_government"
				using = era_innov_blockers

				blockoverride "eib_visible"
				{
					visible = "[CultureInnovation.GetCultureEra.GetType.IsInvalidForPlayerGovernment]"
				}

				blockoverride "eib_text"
				{
					text = "CULTURE_WINDOW_ERA_INNOVATION_BLOCKED_FOR_PLAYER_GOVERNMENT"
				}
			}

			container = {
				name = "blocker"
				using = era_innov_blockers

				blockoverride "eib_visible"
				{
					visible = "[Not(CultureInnovation.CanGainProgress)]"
				}

				blockoverride "eib_text"
				{
					text = "[CultureInnovation.GetCantGainProgressReason]"
				}
			}

			container = {
				using = era_innov_effects

				blockoverride "eie_label_visible"
				{
					visible = "[CultureInnovationType.HasEffects]"
					minimumsize = { 500 30 }
				}


				blockoverride "eie_effects"
				{
					text = "[CultureInnovationType.GetEffectsDesc]"
				}
			}

			flowcontainer = {
				minimumsize = { 100% 0 }
				direction = vertical
				ignoreinvisible = yes

				text_single = {
					text = "[CultureInnovation.GetInnovationState]"
				}

				progressbar_standard = {
					visible = "[And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive))]"
					size = { 300 25 }

					min = 0
					max = 100
					value = "[FixedPointToFloat(CultureInnovation.GetProgress)]"

					text_single = {
						parentanchor = hcenter|vcenter
						widgetanchor = hcenter|vcenter
						position = { 0 -2 }
						text = "[CultureInnovation.GetProgress|%/0]"

						background = {
							using = Background_Area
							margin = { 10 0 }
						}
					}
				}

				text_single = {
					visible = "[And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive))]"
					text = "INNOVATION_TOOLTIP_PROGRESS"
					autoresize = yes
					max_width = 500
				}
			}

			flowcontainer = {
				minimumsize = { 500 0 }
				direction = vertical
				ignoreinvisible = yes
				name = "progress"
				visible = "[And(CultureInnovation.CanGainProgress, Not(CultureInnovation.IsActive))]"

				background = {
					using = Background_Area
					margin = { 10 10 }
				}

				widget = { size = { 0 5 } }

				text_multi = {
					text = "INNOVATION_TOOLTIP_GAIN"
					autoresize = yes
					max_width = 500

				}
				textbox = {
					text = "[CultureInnovation.GetProgressGainBreakdownString]"
					autoresize = yes
					max_width = 500
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					using = DefaultTooltipText
				}

				widget = { size = { 0 5 } }

				textbox = {
					text = "[CultureInnovation.GetProgressChanceBreakdownString]"
					autoresize = yes
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					using = DefaultTooltipText
				}
			}

			container = {
				using = era_innov_flavor

				blockoverride "eif_text" {
					text = "[CultureInnovationType.GetDescription]"
					max_width = 500
				}
			}

			block "AfterDescription" {}
		}
	}
}
container = {
	alwaystransparent = no
	name = "CultureInnovationTooltip"
	using = culture_innovation_tooltip
}

template culture_era_tooltip {
	container = {
		using = GeneralTooltipSetup
		alwaystransparent = no
		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		flowcontainer = {
			margin = { 20 20 }
			spacing = 15
			direction = vertical
			ignoreinvisible = yes
			datacontext = "[CultureEra.GetType]"

			widget = {
				size = { 500 50}

				background = {
					using = Background_Area_Dark
					margin = { 15 0 }
					margin_top = 10
				}

				text_single = {
					parentanchor = vcenter|left
					text = "[CultureEra.GetNameNoTooltip]"
				}

				text_single = {
					parentanchor = vcenter|right
					text = "[era|E]"
				}
			}

			text_single = {
				visible = "[Not(CultureEra.IsActive)]"
				text = "CULTURE_ERA_BLOCKED_BLOCKED_TILE"
			}

			container = {
				name = "blockers"
				using = era_innov_blockers
				blockoverride "eib_visible"
				{
					visible = "[And(Not(CultureEra.IsActive), Not(CultureEra.CanGainProgress))]"
				}
				blockoverride "eib_text"
				{
					text = "[CultureEra.GetCantGainProgressReason]"
				}
			}


			flowcontainer = {
				name = "progress"
				visible = "[And(Not(CultureEra.IsActive), CultureEra.CanGainProgress)]"
				minimumsize = { 100% 0 }
				direction = vertical
				ignoreinvisible = yes

				text_single = {
					text = "[CultureEra.GetProgressAndGainBreakdown]"
				}
			}

			text_single = {
				visible = "[CultureEra.IsActive]"
				text = "CULTURE_ERA_TOOLTIP_REACHED"
			}

			container = {
				using = era_innov_flavor

				blockoverride "eif_text" {
					text = "[CultureEraType.GetDescription]"
					max_width = 500
				}
			}

			block "cet_click_text"
			{
				text_single = {
					default_format = "#I"
					text = "VIEW_CLICK"
				}
			}
		}
	}
}
container = {
	alwaystransparent = no
	name = "CultureEraTooltip"
	using = culture_era_tooltip

	blockoverride "cet_click_text"
	{
		#no text
	}
}

types CultureTooltips
{
	type culture_tooltip = widget
	{
		using = GeneralTooltipSetup
		alwaystransparent = no

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 15 5 }
			margin_bottom = 16

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 6 4 }
				margin_bottom = 12

				background = {
					name = "header"
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					spriteType = Corneredstretched
					align = vcenter|left
					margin = { 15 0 }
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 160 0 }
						blend_mode = alphamultiply
						alpha = 0.5
					}

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
					}
				}
				hbox = {
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_vertical = expanding
						text_single = {
							layoutpolicy_horizontal = expanding
							name = "header"
							text = "CULTURE_COOLTIP_GETNAME"
							fonttintcolor = "[TooltipInfo.GetTintColor]"
							align = top
							using = Font_Type_Flavor
							using = Font_Size_Big

						}
						hbox = {
							text_single = {
								fonttintcolor = "[TooltipInfo.GetTintColor]"
								text = "CULTURE_RELATION_MY_CULTURE"
								visible = "[Culture.IsPlayerCulture]"
							}

							text_single = {
								fonttintcolor = "[TooltipInfo.GetTintColor]"
								text = "CULTURE_RELATION_MY_CULTURE_GROUP"
								visible = "[And(Culture.IsPlayerCultureGroup, Not(Culture.IsPlayerCulture))]"
							}

							text_single = {
								fonttintcolor = "[TooltipInfo.GetTintColor]"
								text = "CULTURE_RELATION_FOREIGN_CULTURE"
								visible = "[And(Not(Culture.IsPlayerCulture), Not(Culture.IsPlayerCultureGroup))]"
							}

							text_single = {
								datacontext = "[Culture.GetGroup]"
								fonttintcolor = "[TooltipInfo.GetTintColor]"
								text = "CULTURE_WINDOW_GROUPS"
							}
						}
						expand = {
							layoutpolicy_vertical = growing
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						text = "[culture|E]"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
						align = vcenter|right
					}
				}
			}

			vbox = {
				spacing = 4
				margin = { 8 0 }
				layoutpolicy_horizontal = expanding

				text_single = {
					layoutpolicy_horizontal = growing
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					using = DefaultTooltipText
					text = "CULTURE_COOLTIP_HEAD"
					visible = "[Culture.GetCultureHead.IsValid]"
				}

				text_single = {
					layoutpolicy_horizontal = growing
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					using = DefaultTooltipText
					text = "CULTURE_COOLTIP_NO_HEAD"
					visible = "[Not( Culture.GetCultureHead.IsValid )]"
				}

				text_single = {
					layoutpolicy_horizontal = growing
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					using = DefaultTooltipText
					text = "CULTURE_COOLTIP_ERA"
				}

				spacer = {
					size = { 0 4 }
				}

				divider_light = {
					layoutpolicy_horizontal = growing
				}

				hbox = {
					visible = "[Culture.HasFascination]"
					layoutpolicy_horizontal = expanding
					datacontext = "[Culture.GetFascination]"

					tooltipwidget = culture_innovation_tooltip

					widget = {
						size = { 65 45 }
						icon_innovation = {
							scale = 0.7
						}
					}
					vbox = {
						spacing = 8
						layoutpolicy_horizontal = growing
						margin_left = 4
						text_single = {
							layoutpolicy_horizontal = growing
							fonttintcolor = "[TooltipInfo.GetTintColor]"
							using = DefaultTooltipText
							text = "CULTURE_COOLTIP_FASCINATION"
						}

						hbox = {
							layoutpolicy_horizontal = growing
							progressbar_standard = {
								size = { 150 15 }
								min = 0
								max = 100
								value = "[FixedPointToFloat(CultureInnovation.GetProgress)]"
							}
							expand = {}
						}

						expand = {}
					}
				}

				text_single = {
					layoutpolicy_horizontal = growing
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					using = DefaultTooltipText
					visible = "[And( Culture.IsPlayerCultureHead, And( ObjectsEqual( GetPlayer.GetCulture, Culture.Self ), Culture.HasAvailableInnovation ) )]"
					text = "INGAME_TOPBAR_CULTURE_HEAD"
					default_format = "#weak"
				}

				text_single = {
					layoutpolicy_horizontal = growing
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					using = DefaultTooltipText
					visible = "[And( ObjectsEqual( GetPlayer.GetCulture, Culture.Self ), Not( Culture.HasAvailableInnovation ) )]"
					text = "CULTURE_COOLTIP_NO_AVAILABLE_INNOVATION"
				}

				block "extra_info"
				{
				}
			}
		}
	}

	type culture_tooltip_click = culture_tooltip
	{
		blockoverride "extra_info" {
			spacer = {
				size = { 0 4 }
			}
			divider_light = {
				layoutpolicy_horizontal = growing
			}

			text_single = {
				layoutpolicy_horizontal = growing
				text = "CULTURE_COOLTIP_CLICK"
				margin = { 10 0 }
			}

		}
	}
}

container = {
	alwaystransparent = no
	name = "CultureTooltip"
	culture_tooltip = {}
}

container = {
	alwaystransparent = no
	name = "SecretTooltip"

	object_tooltip_pop_out = {
		blockoverride "header_additions" {
			hbox = {
				margin_right = 5
				margin_top = -10
				icon = {
					size = { 52 52 }
					texture = "[Secret.GetType.GetIcon]"
					tintcolor = "[TooltipInfo.GetTintColor]"
				}
			}
		}

		blockoverride "title_text" {
			text = "[Secret.GetNameNoTooltip]"
		}
		blockoverride "concept_link" {
			text = [secret|E]
		}
		blockoverride "description_text" {
			text = "[Secret.GetTooltipDesc]"
		}
	}
}

container = {
	alwaystransparent = no
	name = "SecretTypeTooltip"

	object_tooltip_pop_out = {
		blockoverride "header_additions" {
			hbox = {
				margin_right = 5
				margin_top = -10
				icon = {
					size = { 52 52 }
					texture = "[SecretType.GetIcon]"
					tintcolor = "[TooltipInfo.GetTintColor]"
				}
			}
		}

		blockoverride "title_text" {
			text = "[SecretType.GetNameNoTooltip]"
		}
		blockoverride "concept_link" {
			text = [secret|E]
		}
		blockoverride "description_text" {
			text = "[SecretType.GetDesc]"
		}
	}
}

container = {
	alwaystransparent = no
	name = "GeographicalRegionTooltip"
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			text = "[GeographicalRegion.GetNameNoTooltip]"
		}

		blockoverride "concept_link" {
			text = [region|E]
		}
		blockoverride "description_text" {
			text = VIEW_CLICK
			default_format = "#I"
		}
	}
}
